diff -ruN trafficserver-6.1.1.orig/doc/admin-guide/files/records.config.en.rst trafficserver-6.1.1/doc/admin-guide/files/records.config.en.rst
--- trafficserver-6.1.1.orig/doc/admin-guide/files/records.config.en.rst	2016-02-03 11:35:34.000000000 +0900
+++ trafficserver-6.1.1/doc/admin-guide/files/records.config.en.rst	2016-04-26 09:57:20.746012000 +0900
@@ -1412,6 +1412,30 @@
 
    When enabled (``1``), Traffic Server ignores origin server requests to bypass the cache.
 
+.. ts:cv:: CONFIG proxy.config.http.cache.ignore_expires INT 0
+   :reloadable:
+   :overridable:
+
+   When enabled (``1``), Traffic Server ignores any ``Expires``
+   headers from the server. This technically violates the HTTP RFC,
+   but simplifies the operation of web site administrators to control whether
+   or not contents are cached.
+   With combination with ``proxy.config.http.cache.required_headers = 2`` and
+   ``proxy.config.http.cache.ignore_server_cc_max_age = 1``, only the value of
+   ``Cache-Control: s-maxage`` is checked to determine the content is cacheable.
+
+.. ts:cv:: CONFIG proxy.config.http.cache.ignore_server_cc_max_age INT 0
+   :reloadable:
+   :overridable:
+
+   When enabled (``1``), Traffic Server ignores any ``Cache-Control:
+   max-age`` headers from the server. This technically violates the HTTP RFC,
+   but simplifies the operation of web site administrators to control whether
+   or not contents are cached.
+   With combination with ``proxy.config.http.cache.required_headers = 2`` and
+   ``proxy.config.http.cache.ignore_expires = 1``, only the value of
+   ``Cache-Control: s-maxage`` is checked to determine the content is cacheable.
+
 .. ts:cv:: CONFIG proxy.config.http.cache.cache_responses_to_cookies INT 1
    :reloadable:
    :overridable:
diff -ruN trafficserver-6.1.1.orig/doc/developer-guide/api/functions/TSHttpOverridableConfig.en.rst trafficserver-6.1.1/doc/developer-guide/api/functions/TSHttpOverridableConfig.en.rst
--- trafficserver-6.1.1.orig/doc/developer-guide/api/functions/TSHttpOverridableConfig.en.rst	2016-02-03 11:35:34.000000000 +0900
+++ trafficserver-6.1.1/doc/developer-guide/api/functions/TSHttpOverridableConfig.en.rst	2016-04-26 09:57:20.746012000 +0900
@@ -88,6 +88,8 @@
 |   :ts:cv:`proxy.config.http.cache.ignore_client_no_cache`
 |   :ts:cv:`proxy.config.http.cache.ignore_client_cc_max_age`
 |   :ts:cv:`proxy.config.http.cache.ims_on_client_no_cache`
+|   :ts:cv:`proxy.config.http.cache.ignore_expires`
+|   :ts:cv:`proxy.config.http.cache.ignore_server_cc_max_age`
 |   :ts:cv:`proxy.config.http.cache.ignore_server_no_cache`
 |   :ts:cv:`proxy.config.http.cache.cache_responses_to_cookies`
 |   :ts:cv:`proxy.config.http.cache.ignore_authentication`
diff -ruN trafficserver-6.1.1.orig/lib/perl/lib/Apache/TS/AdminClient.pm trafficserver-6.1.1/lib/perl/lib/Apache/TS/AdminClient.pm
--- trafficserver-6.1.1.orig/lib/perl/lib/Apache/TS/AdminClient.pm	2016-02-03 11:35:34.000000000 +0900
+++ trafficserver-6.1.1/lib/perl/lib/Apache/TS/AdminClient.pm	2016-04-26 09:57:20.748012000 +0900
@@ -459,6 +459,8 @@
  proxy.config.http.cache.ignore_client_cc_max_age
  proxy.config.http.cache.cluster_cache_local
  proxy.config.http.cache.ignore_client_no_cache
+ proxy.config.http.cache.ignore_expires
+ proxy.config.http.cache.ignore_server_cc_max_age
  proxy.config.http.cache.ignore_server_no_cache
  proxy.config.http.cache.ims_on_client_no_cache
  proxy.config.http.cache.max_open_read_retries
diff -ruN trafficserver-6.1.1.orig/lib/ts/apidefs.h.in trafficserver-6.1.1/lib/ts/apidefs.h.in
--- trafficserver-6.1.1.orig/lib/ts/apidefs.h.in	2016-02-03 11:35:34.000000000 +0900
+++ trafficserver-6.1.1/lib/ts/apidefs.h.in	2016-04-26 09:59:35.867012000 +0900
@@ -693,6 +693,8 @@
   TS_CONFIG_HTTP_NUMBER_OF_REDIRECTIONS,
   TS_CONFIG_HTTP_CACHE_MAX_OPEN_WRITE_RETRIES,
   TS_CONFIG_HTTP_REDIRECT_USE_ORIG_CACHE_KEY,
+  TS_CONFIG_HTTP_CACHE_IGNORE_EXPIRES,
+  TS_CONFIG_HTTP_CACHE_IGNORE_SERVER_CC_MAX_AGE,
   TS_CONFIG_LAST_ENTRY
 } TSOverridableConfigKey;
 
diff -ruN trafficserver-6.1.1.orig/mgmt/RecordsConfig.cc trafficserver-6.1.1/mgmt/RecordsConfig.cc
--- trafficserver-6.1.1.orig/mgmt/RecordsConfig.cc	2016-02-03 11:35:34.000000000 +0900
+++ trafficserver-6.1.1/mgmt/RecordsConfig.cc	2016-04-26 09:57:20.748012000 +0900
@@ -640,6 +640,10 @@
   ,
   {RECT_CONFIG, "proxy.config.http.cache.ignore_server_no_cache", RECD_INT, "0", RECU_DYNAMIC, RR_NULL, RECC_NULL, NULL, RECA_NULL}
   ,
+  {RECT_CONFIG, "proxy.config.http.cache.ignore_expires", RECD_INT, "0", RECU_DYNAMIC, RR_NULL, RECC_INT, "[0-1]", RECA_NULL}
+  ,
+  {RECT_CONFIG, "proxy.config.http.cache.ignore_server_cc_max_age", RECD_INT, "0", RECU_DYNAMIC, RR_NULL, RECC_INT, "[0-1]", RECA_NULL}
+  ,
   //       # cache responses to cookies has 4 options
   //       #
   //       #  0 - do not cache any responses to cookies
diff -ruN trafficserver-6.1.1.orig/plugins/experimental/ts_lua/ts_lua_http_config.c trafficserver-6.1.1/plugins/experimental/ts_lua/ts_lua_http_config.c
--- trafficserver-6.1.1.orig/plugins/experimental/ts_lua/ts_lua_http_config.c	2016-02-03 11:35:34.000000000 +0900
+++ trafficserver-6.1.1/plugins/experimental/ts_lua/ts_lua_http_config.c	2016-04-26 11:30:40.814602536 +0900
@@ -113,6 +113,8 @@
   TS_LUA_CONFIG_HTTP_NUMBER_OF_REDIRECTIONS = TS_CONFIG_HTTP_NUMBER_OF_REDIRECTIONS,
   TS_LUA_CONFIG_HTTP_CACHE_MAX_OPEN_WRITE_RETRIES = TS_CONFIG_HTTP_CACHE_MAX_OPEN_WRITE_RETRIES,
   TS_LUA_CONFIG_HTTP_REDIRECT_USE_ORIG_CACHE_KEY = TS_CONFIG_HTTP_REDIRECT_USE_ORIG_CACHE_KEY,
+  TS_LUA_CONFIG_HTTP_CACHE_IGNORE_EXPIRES = TS_CONFIG_HTTP_CACHE_IGNORE_EXPIRES,
+  TS_LUA_CONFIG_HTTP_CACHE_IGNORE_SERVER_CC_MAX_AGE = TS_CONFIG_HTTP_CACHE_IGNORE_SERVER_CC_MAX_AGE,
   TS_LUA_CONFIG_LAST_ENTRY = TS_CONFIG_LAST_ENTRY,
 } TSLuaOverridableConfigKey;
 
@@ -197,6 +199,8 @@
   TS_LUA_MAKE_VAR_ITEM(TS_LUA_CONFIG_HTTP_ENABLE_REDIRECTION), TS_LUA_MAKE_VAR_ITEM(TS_LUA_CONFIG_HTTP_NUMBER_OF_REDIRECTIONS),
   TS_LUA_MAKE_VAR_ITEM(TS_LUA_CONFIG_HTTP_CACHE_MAX_OPEN_WRITE_RETRIES),
   TS_LUA_MAKE_VAR_ITEM(TS_LUA_CONFIG_HTTP_REDIRECT_USE_ORIG_CACHE_KEY), TS_LUA_MAKE_VAR_ITEM(TS_LUA_CONFIG_LAST_ENTRY),
+  TS_LUA_MAKE_VAR_ITEM(TS_LUA_CONFIG_HTTP_CACHE_IGNORE_EXPIRES),
+  TS_LUA_MAKE_VAR_ITEM(TS_LUA_CONFIG_HTTP_CACHE_IGNORE_SERVER_CC_MAX_AGE),
 };
 
 // Needed to make sure we have the latest list of overridable http config vars when compiling
diff -ruN trafficserver-6.1.1.orig/proxy/InkAPI.cc trafficserver-6.1.1/proxy/InkAPI.cc
--- trafficserver-6.1.1.orig/proxy/InkAPI.cc	2016-02-03 11:35:34.000000000 +0900
+++ trafficserver-6.1.1/proxy/InkAPI.cc	2016-04-26 09:57:20.749012000 +0900
@@ -7741,6 +7741,12 @@
   case TS_CONFIG_HTTP_CACHE_IMS_ON_CLIENT_NO_CACHE:
     ret = &overridableHttpConfig->cache_ims_on_client_no_cache;
     break;
+  case TS_CONFIG_HTTP_CACHE_IGNORE_EXPIRES:
+    ret = &overridableHttpConfig->cache_ignore_expires;
+    break;
+  case TS_CONFIG_HTTP_CACHE_IGNORE_SERVER_CC_MAX_AGE:
+    ret = &overridableHttpConfig->cache_ignore_server_cc_max_age;
+    break;
   case TS_CONFIG_HTTP_CACHE_IGNORE_SERVER_NO_CACHE:
     ret = &overridableHttpConfig->cache_ignore_server_no_cache;
     break;
@@ -8286,10 +8292,11 @@
       else if (!strncmp(name, "proxy.config.http.flow_control.enabled", length))
         cnf = TS_CONFIG_HTTP_FLOW_CONTROL_ENABLED;
       break;
-      break;
     case 's':
       if (!strncmp(name, "proxy.config.http.send_http11_requests", length))
         cnf = TS_CONFIG_HTTP_SEND_HTTP11_REQUESTS;
+      else if (!strncmp(name, "proxy.config.http.cache.ignore_expires", length))
+        cnf = TS_CONFIG_HTTP_CACHE_IGNORE_EXPIRES;
       break;
     }
     break;
@@ -8546,6 +8553,8 @@
         cnf = TS_CONFIG_HTTP_CACHE_IGNORE_CLIENT_CC_MAX_AGE;
       else if (!strncmp(name, "proxy.config.http.negative_revalidating_lifetime", length))
         cnf = TS_CONFIG_HTTP_NEGATIVE_REVALIDATING_LIFETIME;
+      else if (!strncmp(name, "proxy.config.http.cache.ignore_server_cc_max_age", length))
+        cnf = TS_CONFIG_HTTP_CACHE_IGNORE_SERVER_CC_MAX_AGE;
       break;
     case 't':
       switch (name[length - 4]) {
diff -ruN trafficserver-6.1.1.orig/proxy/InkAPITest.cc trafficserver-6.1.1/proxy/InkAPITest.cc
--- trafficserver-6.1.1.orig/proxy/InkAPITest.cc	2016-02-03 11:35:34.000000000 +0900
+++ trafficserver-6.1.1/proxy/InkAPITest.cc	2016-04-26 09:58:51.868012000 +0900
@@ -7218,7 +7218,8 @@
   "proxy.config.http.auth_server_session_private", "proxy.config.http.slow.log.threshold", "proxy.config.http.cache.generation",
   "proxy.config.body_factory.template_base", "proxy.config.http.cache.open_write_fail_action",
   "proxy.config.http.redirection_enabled", "proxy.config.http.number_of_redirections",
-  "proxy.config.http.cache.max_open_write_retries", "proxy.config.http.redirect_use_orig_cache_key"};
+  "proxy.config.http.cache.max_open_write_retries", "proxy.config.http.redirect_use_orig_cache_key",
+  "proxy.config.http.cache.ignore_server_cc_max_age", "proxy.config.http.cache.ignore_expires"};
 
 REGRESSION_TEST(SDK_API_OVERRIDABLE_CONFIGS)(RegressionTest *test, int /* atype ATS_UNUSED */, int *pstatus)
 {
diff -ruN trafficserver-6.1.1.orig/proxy/http/HttpConfig.cc trafficserver-6.1.1/proxy/http/HttpConfig.cc
--- trafficserver-6.1.1.orig/proxy/http/HttpConfig.cc	2016-02-03 11:35:34.000000000 +0900
+++ trafficserver-6.1.1/proxy/http/HttpConfig.cc	2016-04-26 09:57:20.749012000 +0900
@@ -1030,6 +1030,8 @@
   HttpEstablishStaticConfigByte(c.oride.cache_ignore_client_no_cache, "proxy.config.http.cache.ignore_client_no_cache");
   HttpEstablishStaticConfigByte(c.oride.cache_ignore_client_cc_max_age, "proxy.config.http.cache.ignore_client_cc_max_age");
   HttpEstablishStaticConfigByte(c.oride.cache_ims_on_client_no_cache, "proxy.config.http.cache.ims_on_client_no_cache");
+  HttpEstablishStaticConfigByte(c.oride.cache_ignore_expires, "proxy.config.http.cache.ignore_expires");
+  HttpEstablishStaticConfigByte(c.oride.cache_ignore_server_cc_max_age, "proxy.config.http.cache.ignore_server_cc_max_age");
   HttpEstablishStaticConfigByte(c.oride.cache_ignore_server_no_cache, "proxy.config.http.cache.ignore_server_no_cache");
   HttpEstablishStaticConfigByte(c.oride.cache_responses_to_cookies, "proxy.config.http.cache.cache_responses_to_cookies");
 
@@ -1295,6 +1297,8 @@
   params->oride.cache_ignore_client_no_cache = INT_TO_BOOL(m_master.oride.cache_ignore_client_no_cache);
   params->oride.cache_ignore_client_cc_max_age = INT_TO_BOOL(m_master.oride.cache_ignore_client_cc_max_age);
   params->oride.cache_ims_on_client_no_cache = INT_TO_BOOL(m_master.oride.cache_ims_on_client_no_cache);
+  params->oride.cache_ignore_expires = INT_TO_BOOL(m_master.oride.cache_ignore_expires);
+  params->oride.cache_ignore_server_cc_max_age = INT_TO_BOOL(m_master.oride.cache_ignore_server_cc_max_age);
   params->oride.cache_ignore_server_no_cache = INT_TO_BOOL(m_master.oride.cache_ignore_server_no_cache);
   params->oride.cache_responses_to_cookies = m_master.oride.cache_responses_to_cookies;
   params->oride.cache_ignore_auth = INT_TO_BOOL(m_master.oride.cache_ignore_auth);
diff -ruN trafficserver-6.1.1.orig/proxy/http/HttpConfig.h trafficserver-6.1.1/proxy/http/HttpConfig.h
--- trafficserver-6.1.1.orig/proxy/http/HttpConfig.h	2016-02-03 11:35:34.000000000 +0900
+++ trafficserver-6.1.1/proxy/http/HttpConfig.h	2016-04-26 09:57:20.749012000 +0900
@@ -369,6 +369,7 @@
       proxy_response_server_enabled(1), proxy_response_hsts_max_age(-1), proxy_response_hsts_include_subdomains(0),
       insert_squid_x_forwarded_for(1), send_http11_requests(1), cache_http(1), cache_cluster_cache_local(0),
       cache_ignore_client_no_cache(1), cache_ignore_client_cc_max_age(0), cache_ims_on_client_no_cache(1),
+      cache_ignore_expires(0), cache_ignore_server_cc_max_age(0),
       cache_ignore_server_no_cache(0), cache_responses_to_cookies(1), cache_ignore_auth(0), cache_urls_that_look_dynamic(1),
       cache_required_headers(2), cache_range_lookup(1), cache_range_write(0), insert_request_via_string(1),
       insert_response_via_string(0), doc_in_cache_skip_dns(1), flow_control_enabled(0), accept_encoding_filter_enabled(0),
@@ -452,6 +453,8 @@
   MgmtByte cache_ignore_client_no_cache;
   MgmtByte cache_ignore_client_cc_max_age;
   MgmtByte cache_ims_on_client_no_cache;
+  MgmtByte cache_ignore_expires;
+  MgmtByte cache_ignore_server_cc_max_age;
   MgmtByte cache_ignore_server_no_cache;
   MgmtByte cache_responses_to_cookies;
   MgmtByte cache_ignore_auth;
diff -ruN trafficserver-6.1.1.orig/proxy/http/HttpTransact.cc trafficserver-6.1.1/proxy/http/HttpTransact.cc
--- trafficserver-6.1.1.orig/proxy/http/HttpTransact.cc	2016-02-03 11:35:34.000000000 +0900
+++ trafficserver-6.1.1/proxy/http/HttpTransact.cc	2016-04-26 09:57:20.752012000 +0900
@@ -6162,7 +6162,9 @@
     // If a ttl is set: no header required for caching
     // otherwise: follow parameter http.cache.required_headers
     if (s->cache_control.ttl_in_cache <= 0) {
-      uint32_t cc_mask = (MIME_COOKED_MASK_CC_MAX_AGE | MIME_COOKED_MASK_CC_S_MAXAGE);
+      uint32_t cc_mask = ((s->txn_conf->cache_ignore_server_cc_max_age ? 0 : MIME_COOKED_MASK_CC_MAX_AGE) |
+                          MIME_COOKED_MASK_CC_S_MAXAGE);
+
       // server did not send expires header or last modified
       // and we are configured to not cache without them.
       switch (s->txn_conf->cache_required_headers) {
@@ -6172,7 +6174,8 @@
         break;
 
       case HttpConfigParams::CACHE_REQUIRED_HEADERS_AT_LEAST_LAST_MODIFIED:
-        if (!response->presence(MIME_PRESENCE_EXPIRES) && !(response->get_cooked_cc_mask() & cc_mask) &&
+        if ((s->txn_conf->cache_ignore_expires || !response->presence(MIME_PRESENCE_EXPIRES)) &&
+            !(response->get_cooked_cc_mask() & cc_mask) &&
             !response->get_last_modified()) {
           DebugTxn("http_trans", "[is_response_cacheable] "
                                  "last_modified, expires, or max-age is required");
@@ -6183,7 +6186,8 @@
         break;
 
       case HttpConfigParams::CACHE_REQUIRED_HEADERS_CACHE_CONTROL:
-        if (!response->presence(MIME_PRESENCE_EXPIRES) && !(response->get_cooked_cc_mask() & cc_mask)) {
+        if ((s->txn_conf->cache_ignore_expires || !response->presence(MIME_PRESENCE_EXPIRES)) &&
+            !(response->get_cooked_cc_mask() & cc_mask)) {
           DebugTxn("http_trans", "[is_response_cacheable] "
                                  "expires header or max-age is required");
           return false;
